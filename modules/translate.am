#!/usr/bin/env bash

##########################################################################
# THIS MODULE IS USED TO CREATE AND UPDATE TRANSLATION FILES
##########################################################################

# Files for string extraction
list="APP-MANAGER modules/database.am modules/install.am modules/management.am modules/sandboxes.am modules/template.am modules/translate.am"
# Common functions
gumI() {
	if command -v gum -v >/dev/null; then
		input=$(gum input --placeholder "$@" --placeholder.foreground 2)
	else
		read -p "$@" input
	fi
	echo "${input}"
}
echo -e "\n${Green}$@${Reset}\n" $"Translating: $list"


# Enter AMCLI dir

enter_() {
	cd "$AMPATH" || echo $"Can´t enter AMPATH $AMPATH"
}

# Remove old pot
prepare_() {
  if [ -f source.pot ]; then
    rm source.pot
  fi
}

# extract strings from list
# xgettext can´t handle $"" or $''
#xgettext --default-domain=am --output=messages.po --output-dir=po --language Shell APP-MANAGER
# extract modules
#xgettext --directory=modules --default-domain=am --output=messages.po --output-dir=po --language=Shell --join-existing --check=quote-unicode --indent --package-name=am --package-version=6.7 --msgid-bugs-address=noreply@github.com database.am install.am management.am sandboxes.am template.am translation.am
extract_() {
  for file in ${list}; do
    echo "$file"
    # Extract strings for translation
    bash --dump-po-strings "$file" >> source.pot
  done
}

# Not have to be used hopefully
fix_() {
  echo -e "\n${Green}$@${Reset}\n" $"Fixing strings"
  echo -e "\n\033[1;37m$@${Reset}\n" '\\\' && sed -i ':a;N;$!ba;s/\\\\\\/\\\\/g' source.pot
  echo -e "\n\033[1;37m$@${Reset}\n" '\\' && sed -i ':a;N;$!ba;s/\\\\/\\/g' source.pot
  echo -e "\n\033[1;37m$@${Reset}\n" '\n"
"\n"
"' && sed -i ':a;N;$!ba;s/\\n"\n"\\n"\n"/\n\n/g' source.pot
  echo -e "\n\033[1;37m$@${Reset}\n" '"
"\n"
"' && sed -i ':a;N;$!ba;s/"\n"\\n"\n"/\n\n/g' source.pot
  echo -e "\n\033[1;37m$@${Reset}\n" '\n"
"' && sed -i ':a;N;$!ba;s/\\n"\n"/\n/g' source.pot
  echo -e "\n\033[1;37m$@${Reset}\n" '"
"' && sed -i ':a;N;$!ba;s/""\n"/"\n/g' source.pot
  echo -e "\n${Green}$@${Reset}\n" $"Fixing completed"
}

# Create file with header
header_() {
  LANGUAGE="English"
  PACKAGE_NAME="am"
  PACKAGE_VERSION="$AMVERSION"
  TRANSLATOR_NAME="John Doe"
  TRANSLATOR_EMAIL="john.doe@example.com"
  touch temp.po
  cat << EOF > temp.po
# File with translation for AM
# FIRST AUTHOR <EMAIL@ADDRESS>, $(date +"%Y")
msgid ""
msgstr ""
"Project-Id-Version: ${PACKAGE_NAME} ${PACKAGE_VERSION}\n"
"Report-Msgid-Bugs-To: https://github.com/ivan-hc/AM\n"
"POT-Creation-Date: $(date +"%Y-%m-%d")\n"
"PO-Revision-Date: $(date +"%Y-%m-%d")\n"
"Last-Translator: ${TRANSLATOR_NAME} <${TRANSLATOR_EMAIL}>\n"
"Language-Team: ${LANGUAGE} <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"
EOF
}

# Join duplicate strings
duplicities_() {
  msguniq "${1}" -o "${2}"
}

# Create main translation file
run_() {
  header_
  # add strings to empty file with header
  cat source.pot >> temp.po
  # remove duplicities from po file
  duplicities_ temp.po source.po
  # recreate fixed pot file
  msgcat --output-file=source.pot --unique --indent --no-wrap source.po
}

# Update all translations
update_() {
  if [ -f source.po ]; then
    msgmerge -U source.po source.pot
  else
    msginit --input source.po --output-file=source.po --no-translator --locale en
  fi
  duplicities_ "source.po" new.po
  mv new.po "source.po"
}

# Cleaning
clean_() {
  rm -f temp.po
  rm -f *.po~
}

# Run
enter_
prepare_
extract_
run_
update_
clean_

echo -e "\n${Green}$@${Reset}\n" $"Source for translations prepared"

